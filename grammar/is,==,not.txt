'is'는 비교 연산자가 맞다. 하지만 중요한 건 변수의 값을 비교하는게 아니라 레퍼런스(C식으로 설명하자면 변수의 포인터)를 비교하는 연산자다.

Python의 변수는 내부적으로 데이터 그 자체를 가리키는게 아니라 인스턴스 포인터(값이 저장되어 있는 메모리의 주소, 즉 레퍼런스)를 가리킨다. 물론 C언어가 아니기 때문에 변수를 포인터처럼 엑세스 할 수는 없다.

Python은 자주 쓰이는 값이 미리 정의되어 있다. 즉, 위에서 숫자 1이나 문자열 "123" 은 자주 쓰이는 데이터다. 이런 데이터는 이미 메모리상에 고정되어서 저장되어 있고 프로그래머가 이 데이터를 이용하려 할 때 새로운 데이터 공간이 할당되는게 아니라 미리 할당되어 있는 '자주 쓰이는 데이터가 저장된 공간'의 포인터를 매칭시키게 된다.

2.2 논리 연산자
두 조건이 논리적 관계를 확인하기 위한 연산자로 파이썬에서는 아래의 논리 연산자를 제공한다. 결과는 True 또는 False를 반환한다.

논리 연산자	의미
a and b	a와 b 모두가 True인가?
a or b	a 또는 b 중 하나가 True인가?
not a	a의 반대 값은?

a == b : a 와 b가 같은가?

a is b : a 는 b 지?

a is not None : a 가 None 이 아니지?  // 응 (True) None 아니야, 아니(False) None 이야
a is not 3 : a 가 3 이 아니지?
a not in x // a 가 x 에 포함되어 있는거 아니지? 응(True) 포함되어 있지 않아, 아니(False) 포함되어 있어

if callable(success) is False: // success 가 호출가능(callable)한 함수가 아니지? 그렇다면:
if callable(success) is True: // success 가 호출가능(callable)한 함수지? 그렇다면:

a = True if x is 3 else y // a에 True를 넣는데 만약 x 가 3이면 넣고, 아니면 y를 넣는다
a = 7 if x is True else 8 // a에 7을 넣는데 만약 x 가 True이면 넣고, 아니면 8을 넣는다

