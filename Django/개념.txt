어플리케이션 만들기
> python manage.py startapp main
메인 디렉토리 생성됨

장고에 사용해야 한다고 알려줘야 한다.
settings.py 에서 코드 추가
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]


manage.py는 스크립트인데, 사이트 관리를 도와주는 역할을 합니다. 이 스크립트로 다른 설치 작업 없이, 컴퓨터에서 웹 서버를 시작할 수 있습니다.

settings.py는 웹사이트 설정이 있는 파일입니다.

urls.py파일은 urlresolver가 사용하는 패턴 목록을 포함하고 있습니다.

class Post(models.Model):
models은 Post가 장고 모델임을 의미합니다. 이 코드 때문에 장고는 Post가 데이터베이스에 저장되어야 한다고 알게 됩니다.

python manage.py makemigrations blog
장고 모델에 (우리가 방금 만든!) 몇 가지 변화가 생겼다는 걸 알게 해줘야 한다.

장고는 데이터베이스에 지금 반영할 수 있도록 마이그레이션 파일(migration file)이라는 것을 준비해 두었다.
python manage.py migrate blog
실제 데이터베이스에 모델 추가를 반영.

admin.site.register(Post)
관리자 페이지에서 만든 모델을 보려면 모델을 등록해야 한다.

python manage.py createsuperuser
로그인하기 위해서는, 모든 권한을 가지는 슈퍼 사용자(superuser)를 생성해야 한다.

인터넷의 모든 페이지는 고유한 URL을 가지고 있어야 해요.
애플리케이션은 사용자가 URL을 입력하면 어떤 내용을 보여줘야 하는지 알고 있어요.
장고는 URLconf (URL configuration)를 사용합니다.
URLconf는 장고에서 URL과 일치하는 뷰를 찾기 위한 패턴들의 집합입니다.

관리자 URL
url(r'^admin/', admin.site.urls),

장고는 admin/로 시작하는 모든 URL을 view와 대조해 찾아낸다.

정규표현식(Regex)
^ : 문자열이 시작할 떄
$ : 문자열이 끝날 때
\d : 숫자
: 바로 앞에 나오는 항목이 계속 나올 때
() : 패턴의 부분을 저장할 때

^post/(\d+)/$

^post/ : url이(오른쪽부터) post/로 시작합니다.
(\d+) : 숫자(한 개 이상)가 있습니다. 이 숫자로 조회하고 싶은 게시글을 찾을 수 있어요.
/ : /뒤에 문자가 있습니다.
$ : url 마지막이 /로 끝납니다

mysite/urls.py파일을 깨끗한 상태로 유지하기 위해, blog 애플리케이션에서 메인 mysite/urls.py파일로 url들을 가져올 거에요.

먼저 #로 시작하는 줄을 삭제하고 main url('')로 blog.urls를 가져오는 행을 추가해 봅시다.

장고는 http://127.0.0.1:8000/ 로 들어오는 모든 접속 요청을 blog.urls로 전송해 추가 명령을 찾을 거예요.

from django.conf.urls import url
from . import views
장고의 메소드와 blog 애플리케이션에서 사용할 모든 views를 불러오고 있다.

name='post_list'는 URL에 이름을 붙인 것으로 뷰를 식별합니다
urlpatterns = [
    url(r'^$', views.post_list, name='post_list'),  # 이 패턴은 장고에게 누군가 웹사이트에 'http://127.0.0.1:8000/' 주소로 들어왔을 때 views.post_list를 보여준다
]

====================================================


render 함수는 request 객체를 첫번째 인자로, 템플릿 이름을 두번째 인자로 받습니다. 그리고 세번째 인자는 선택적으로써, 템플릿에 전달할 딕셔너리입니다.
render() 함수는 주어진 템플릿과 딕셔너리로 렌더링된 결과를 HttpResponse 객체로 리턴합니다.

render함수에는 매개변수 request(사용자가 요청하는 모든 것)와 'blog/post_list.html' 템플릿이 있습니다.
{}이 보일 텐데, 이곳에 템플릿을 사용하기 위해 매개변수를 추가할 거에요. (이 매개변수를'posts'라고 할거에요){'posts': posts}이렇게 작성할거에요.
:이전에 문자열이 와야하고, 작은 따옴표''를 양쪽에 붙이는 것을 잊지 마세요.

render
render()함수는 django.shortcuts 패키지에 포함되어 있는 도우미 함수입니다.
동적으로 template을 이용하여 html을 생성한 후 httpResponse에 포함해 반환해줍니다.
request와 템플릿파일명 이 필수 인자입니다.


MVC 패턴
MVC 패턴(Model View Controller Pattern)
조율, 데이터, 화면으로 프로그램을 구성하는 방식

Model(데이터) - models.py
Candidate 클래스의 형식대로 데이터를 DB에 저장, 불러옴
View(화면) - templates
화면에 어떤 장면을 보여줄지를 결정
Controller(조율) - views.py
Candidate 모델에서 데이터를 읽어, index.html에 전달

