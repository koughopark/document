1. 플럼설치
	CM홈에서 Cluster1 콤보박스 클릭 -> 서비스 추가
	Flume 선택 -> 계속
	호스트 선택 클릭 -> server02 선택 -> 확인 -> 계속
	완료

2. 플럼설정
	CM홈 -> Flume 클릭
	구성 클릭
	검색: java heap
	Agent Default Group: 50 -> 100 MiB 변경

3. 플럼 시작
	CM홈 -> Flume 콤보박스 -> 시작

4. 카프카설치
	CM홈에서 Cluster1 콤보박스 클릭 -> 서비스 추가
	Kafka 선택 -> 계속
	Kafka Broker 호스트 선택 클릭 -> server02 선택 -> 확인 -> 계속
	[오류나면]
		새 브라우저 열기 -> CM 접속
		CM 홈 -> kafka -> 구성 -> 검색: java heap
		Kafka Broker Default Group : 50 -> 256Mib 변경
		기존 브라우저 창 -> 재시도(Resume) 클릭
	계속
	완료

5. SmartCar 에이전트 생성
	CM홈 -> flume 클릭 -> 구성 클릭
	중간에 [구성파일] 부분 찾기    # 이부분을 수정해서 플럼 에이전트를 쉽게 생성가능하다.
	Agent 이름: SmartCar_Agent
	구성파일: 기존내용 삭제, 새내용 입력 ->
	[구성파일]
	# 리소스 정의
	SmartCar_Agent.sources  = SmartCarInfo_SpoolSource DriverCarInfo_TailSource
	SmartCar_Agent.channels = SmartCarInfo_Channel DriverCarInfo_Channel
	SmartCar_Agent.sinks    = SmartCarInfo_LoggerSink DriverCarInfo_KafkaSink


	# 에이전트의 Source를 설정
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.type = spooldir
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.spoolDir = /home/pilot-pjt/working/car-batch-log
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.deletePolicy = immediate
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.batchSize = 1000

	# 수집 데이터를 필터링
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors = filterInterceptor

	# filterInterceptor의 Type 설정
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.type = regex_filter
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.regex = ^\\d{14}
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.interceptors.filterInterceptor.excludeEvents = false


	# 에이전트의 Channel
	SmartCar_Agent.channels.SmartCarInfo_Channel.type = memory
	SmartCar_Agent.channels.SmartCarInfo_Channel.capacity  = 100000
	SmartCar_Agent.channels.SmartCarInfo_Channel.transactionCapacity  = 10000

	# 에이전트의 최종 목적지
	SmartCar_Agent.sinks.SmartCarInfo_LoggerSink.type = logger

	# Source와 Channel Sink를 연결
	SmartCar_Agent.sources.SmartCarInfo_SpoolSource.channels = SmartCarInfo_Channel
	SmartCar_Agent.sinks.SmartCarInfo_LoggerSink.channel = SmartCarInfo_Channel

	# Source의 Type "exec"
	SmartCar_Agent.sources.DriverCarInfo_TailSource.type = exec
	SmartCar_Agent.sources.DriverCarInfo_TailSource.command = tail -F /home/pilot-pjt/working/driver-realtime-log/SmartCarDriverInfo.log
	SmartCar_Agent.sources.DriverCarInfo_TailSource.restart = true
	SmartCar_Agent.sources.DriverCarInfo_TailSource.batchSize = 1000

	SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors = filterInterceptor2

	# Interceptor를 정의
	SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.type = regex_filter
	SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.regex = ^\\d{14}
	SmartCar_Agent.sources.DriverCarInfo_TailSource.interceptors.filterInterceptor2.excludeEvents = false

	# 스마트카 운전자의 실시간 운행 정보를 플럼에서 수집과 동시에 카프카로 전송
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.type = org.apache.flume.sink.kafka.KafkaSink
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.topic = SmartCar-Topic
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.brokerList = server02.hadoop.com:9092
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.requiredAcks = 1
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.batchSize = 1000

	# DriverCarInfo의 Channel을 Memory Channel로 선언
	SmartCar_Agent.channels.DriverCarInfo_Channel.type = memory
	SmartCar_Agent.channels.DriverCarInfo_Channel.capacity= 100000
	SmartCar_Agent.channels.DriverCarInfo_Channel.transactionCapacity = 10000

	# DriverCarInfo의 Source와 Sink의 Channel을 앞서 정의한 DriverCarInfo_Channel로 설정
	SmartCar_Agent.sources.DriverCarInfo_TailSource.channels = DriverCarInfo_Channel
	SmartCar_Agent.sinks.DriverCarInfo_KafkaSink.channel = DriverCarInfo_Channel
	[변경내용 저장]

6. 카프카 Topic 생성
	kafka-topics --create --zookeeper server02.hadoop.com:2181 --replication-factor 1 --partitions 1 --topic SmartCar-Topic

