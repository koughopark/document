- 주제영역 4의 워크플로는 2018년 09월 05일에 스마트카의 다양한 센서로부터 수집된 데이터(타이어, 라이트, 브레이크, 엔진, 배터리)를 분석해 긴급 점검이 필요한 스마트카 차량 리스트를 찾아내는 것이다.
- 워크플로의 하이브 작업에 사용되는 하이브 QL은 /CH06/HiveQL/2nd 의 경로에서 제공


1.주제4 작업 디렉터리로 이동
	휴 -> 메뉴 -> 브라우저 -> 파일 클릭
	/pilot-pjt/workflow/hive_script/subject4



2.주제영역 4에서 사용할 하이브 스크립트파일 2개 생성.
	 /pilot-pjt/workflow/hive_script/subject4 로 이동
	 새로만들기 -> 파일 -> 파일명: create_table_managed_smartcar_emergency_check_info.hql
	 생성된 파일 클릭 -> 좌측 [파일 편집] 클릭
	 아래 코드 입력
 ===========[내부코드]========================
create table if not exists Managed_SmartCar_Emergency_Check_Info (
car_number string,
tire_check string,
light_check string,
engine_check string,
break_check string,
battery_check string,
biz_date string
)
row format delimited
fields terminated by ','
stored as textfile;

==================================================
	저장
	# 스마트카 운전자들의 운행 정보에서 이상 패턴을 관리하기 위한 테이블

	# 같은 위치에 두번째 하이브 스크립트 파일 생성
	새로만들기 -> 파일 -> 파일명: insert_table_managed_smartcar_emergency_check_info.hql
	해당 파일 클릭 -> 편집 -> 아래 코드 입력
======[내부코드]=========
insert into table Managed_SmartCar_Emergency_Check_Info
select

          t1.car_number,
          t2.symptom as tire_symptom,
          t3.symptom as light_symptom,
          t4.symptom as engine_symptom,
          t5.symptom as break_symptom,
          t6.symptom as battery_symptom,
          t1.biz_date
from
         (select distinct car_number as car_number, biz_date from managed_smartcar_status_info  where biz_date = '${working_day}') t1

left outer join ( select
                               car_number,
                               avg(tire_fl) as tire_fl_avg ,
                               avg(tire_fr) as tire_fr_avg ,
                               avg(tire_bl) as tire_bl_avg ,
                               avg(tire_br) as tire_br_avg ,
                               '타이어 점검' as symptom
                       from managed_smartcar_status_info where biz_date ='${working_day}'
                       group by car_number
                       having  tire_fl_avg < 80 or tire_fr_avg < 80 or  tire_bl_avg < 80 or tire_br_avg < 80 ) t2
on t1.car_number = t2.car_number

left outer join ( select
                                distinct car_number,
                                '라이트 점검' as symptom
                       from managed_smartcar_status_info
                       where biz_date = '${working_day}' and (light_fl = '2' or light_fr = '2' or light_bl = '2' or light_br = '2')) t3
on t1.car_number = t3.car_number

left outer join ( select
                               distinct car_number,
                              '엔진 점검' as symptom
                       from managed_smartcar_status_info
                       where biz_date = '${working_day}' and engine = 'C' ) t4
on t1.car_number = t4.car_number

left outer join ( select
                               distinct car_number,
                               '브레이크 점검' as symptom
                       from managed_smartcar_status_info
                       where biz_date = '${working_day}' and break = 'C' ) t5

on t1.car_number = t5.car_number

left outer join (select
                                car_number,
                                avg(battery) as battery_avg,
                                '배터리 점검' as symptom
                       from managed_smartcar_status_info where biz_date = '${working_day}'
                       group by car_number having battery_avg < 30 ) t6
 on t1.car_number = t6.car_number

where t2.symptom is not null or t3.symptom is not null or t4.symptom is not null  or t5.symptom is not null  or t6.symptom is not null

=========================
	저장
	# 하이브 쿼리를 실행하면 스마트카의 6가지 점검 상태를 분석해서 그 결과를 "스마트카 긴급 점검 차량 정보(Managed_SmartCar_Emergency_Check_Info)" 마트 테이블에 저장한다.
	# 쿼리 내용은 주요 필드들을 가공해 스마트카 상태 점검을 위한 새로운 변수를 만들어 내는 피처 엔지니어링 쿼리로 구성돼 있다.



	휴 -> 상단메뉴 [쿼리] 콤보박스 -> 스케줄러 -> Workflow -> [문서(역삼각형)] 클릭 -> 작업 클릭

	워크플로 작업 툴 박스 에서 "Hive Server2 스크립트" 아이콘 드래그 -> [여기에 작업 두기] 에 드롭
	앞 단계에서 만든 pilot-pjt/workflow/hive_script/subject4 에 있는 create_table_smartcar_emergency_check_info.hql 선택 -> 추가 버튼 클릭

	워크플로 작업 툴 박스 에서 "Hive Server2 스크립트" 아이콘 드래그 -> 첫번째 작업 바로 아래 드롭
	앞 단계에서 만든 pilot-pjt/workflow/hive_script/subject4 에 있는 insert_table_managed_smartcar_emergency_check_info.hql 선택 -> 추가 버튼 클릭
	2번째 작업 매개변수 항목: working_day=${today} 입력


	# 워크플로 이름 지정
	작업 내역 상단 My Workflow 클릭 -> "Subject 4 - Workflow" 변경 -> 확인 클릭

	# 저장
	상단 저장 아이콘 클릭

	# 작성한 워크플로를 작동하기 위한 Coordinator 를 생성
	[Hue 3 버전]
	상단 메뉴 -> Workflows -> 편집기 -> Coordinator 클릭 -> 생성 클릭
	[Hue 4 버전]
	상단 메뉴 [쿼리] 콤보박스 -> 스케줄러 -> 예약 클릭

	# 제목 입력
	My Chedule 이름 클릭 -> "Subject4 - Coordinator" 으로 변경

	# Coordinator가 사용할 워크플로 선택
	[Workflow 선택...] 클릭 -> 앞에서 만든 워크플로 (Subject 4 - Workflow) 선택

	# Coordinator는 워크플로를 주기적으로 실행하기 위한 일종의 배치 잡 스케줄러다.
	# 스케줄러 값 변경
	다음 마다: "일", 다음에서: "4":"0"
	옵션 클릭
		시간대: "Asia/Seoul"
		원본: "2018-09-05"(수집일), 시계 아이콘:"00:00"
		->  "2018-12-31", 시계 아이콘:"23:59"
	# 위 설정은 2018년 09월 05일부터 2018년 12월 31일 까지, 매일 새벽 04시에 Coordinator와 연결돼 있는 워크플로가 작동한다.
	# "UTC 시간만 해당됩니다..." 라는 메시지는 "Asia/Seoul"의 타임존을 설정했기 때문에 무시해도 된다.

	# 워크플로 즉시 실행하기 => 매개변수 일자를 직접 입력하고 저장 -> 제출 클릭

	# 워크플로에서 사용할 매개변수인 today 값 설정
	# 앞서 워크플로의 하이브 작업에서 작업일자(수집일자) 매개변수를 "working_day=${today}"로 등록했다. today의 값을 Coordinator의 내장 함수를 통해 다음과 같이 설정한다.
	${coord:formatTime(coord:dateTzOffset(coord:nominalTime(), "Asia/Seoul"), 'yyyyMMdd')}
	저장
	제출

	# 제출된 Coordinator 상태 확인
	[Hue 3]
	휴 -> Workflows -> 대시보드 -> Coordinator
	[hue 4]
	휴 -> 상단 Job 클릭 -> 일정 클릭

	# 워크플로가 작동하면 워크플로에서 정의된 잡이 시작되며, 우측 상단 Job 에서 실행 중인 잡의 개수가 표시된다.

	# "Subject 4 - Workflow"가 정상적으로 작동됐는지 확인
	휴 -> Hive Editor -> QL 입력
	# "biz_date=20180905"의 날짜는 각자의 파일럿 환경의 실행 일자에 맞춰 입력
	# 앞서 워크플로를 통해 만들어지는 Managed_SmartCar_Emergency_Check_Info 테이블이 휴의 Hive Editor에 곧바로 표기되지 않아 하이브 QL 실행 에러가 발생하면 좌측의 테이블 리프레시를 누른다.
======[내부 코드]=========
select * from Managed_SmartCar_Emergency_Check_Info

where biz_date = '20180915'
==========================
	실행

	# 한번 등록한 Coordinator는 종료 기간까지 계속 활성화된 상태로 남아 있게 되어 파일럿 PC의 리소스를 차지하게 된다.
	# 파일럿 환경에서는 매일 워크플로가 실행될 필요가 없으니 실행 및 테스트가 끝난 잡은 상단의 [Workflows] -> 대시보드 -> Coordinator 메뉴를 선택하고, 실행 중인 잡을 선택해서 모두 종료한다.











