bit.ly/lbt-pds
bit.ly/lbt-oracle


@D:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql

skyun.nam@gmail.com

========================================================================================================================


구글드라이브: goo.gl/noxoWS

수집>적재>처리(탐색)>분석(응용) 가치찾기

github: https://github.com/bitacademy-bigdata

gmail : kickscar@gmail.com

office

pycharm

D:\
 |---javastudy
 |    |----- eclipse-workspace
 |---PycharmProjects
 |---python
 |---bigdata


SCM 소스코드메니지먼트
===========================
설치시 시리얼 물어오면 아래와같이 57006711-아무숫자 7개00~99까지 99,98,97.......끝 두자리 숫자를 이런식으로 변경해 보면서
해보면 시리얼이 먹히는게 있습니다
설치 완료후 정보를 보면 시리얼이 보입니다
단 3라이센스 인증 인스톨량이므로 새어 나가지 않도록 공개하지 말아야 합니다
(다른 3사람이 사용하면 인증 통과가 않되니 주의 하십시요)
아래있는 시리얼은 사용 불가이니 사용 하지 말고 반드시 꼭 직접 시리얼을 찾아서 자기것으로만 항상 설치 하십시요

57006711-xxxxxxx00 ~ 57006711-xxxxxxx99
   x = 원하는 숫자

시리얼 끝의 00부터 99까지 넣어 보면 한 개 먹는게(인증 가능) 있습니다.



시리얼의 예:  57006711-232322288
57006711-134679666

================

git config --global user.email "illuillu55@hotmail.com"
git config --global user.name "james"

analysis_fb

pycharm

깃허브 다운로드
https://git-scm.com/downloads

https://developers.facebook.com/tools/debug/accesstoken/

https://developers.facebook.com
-로그인후 우측 상단 내앱 클릭 - 페이스북에서 정보 수집

analysis_fb
analysis_pd
analysis_bchiken

===================

D:\PycharmProjects 물리적 환경
C:\Users\BIT-USER\venv  가상 환경

//Github 등록 방법

[이클립스]
Git Hub 에서 Repositories 에서 NEW 로 프로젝트 생성 -> 생성된 프로젝트 주소 복사 ->

프로젝트 에서 우클릭 -> Team -> Share Project
-> Use or cre... 체크 Project 체크 -> Create Repository 클릭 -> finish
-> Windows -> Show View -> Others -> Git -> Git Repositories
-> Git Repositories 탐색창에서 해당 프로젝트에서 우클릭 -> Commit 클릭 -> Unstaged Changes 에서 Commit 할 파일 선택하여 Staged Changes 로 드래그 -> Commit Message 에서 내용 입력 필수 -> Commit and Push 클릭 -> Push Branch master 창에 자동으로 정보 입력됨 -> next next finish


[파이참]
Github 프로그램 다운,설치 -> 메뉴에서 VCS -> Import into Version Control -> Share Project on GitHub
-> Share Project On GitHub 창에서 Share 버튼 클릭 -> OK -> OK
(변경사항 추가)
프로젝트 소스 변경후 -> VCS -> Commit -> Commit Message 입력 -> 아래 Commit오른쪽 역삼각형 Commit and Push 클릭 -> Push 클릭


//Github 가져오기

[이클립스]
1. File -> Import -> Git -> Projects from Git -> Clone URI (깃허브에서 프로젝트 경로 복사) -> Next -> Next ... -> 저장 경로 지정 -> 완료.

2. 깃허브에서 주소 복사 -> Git Repositories 탐색기에서 Ctrl+v -> 해당 프로젝트에서 우클릭후 import project -> 경로설정

[파이참]
VCS -> Check out from ... -> Git -> 깃허브에서 프로젝트 경로 복사, 저장 경로 지정 -> 완료.



//Github 수정,추가 파일 업로드

[이클립스]
Git Repositories 에서 우클릭 -> 해당 프로젝트 Commit -> Files 선택, Commit message 작성 -> Commit and Push -> 완료

[파이참]
VCS -> Commit -> Commit Message 작성 -> Commit and Push -> 완료


//Github 수정,추가 파일 다운로드

[이클립스]
Git Repositories 에서 우클릭 -> 해당 프로젝트 Pull

===========================

https://www.data.go.kr/
testestzxcv



========================================================================================================================

수집 ,(적재)
분석
시각화
(R, Python// R은 수집에 약함 분석용)

Elastic Search
Lucene

구글 크롤러가 웹사이트를 찔러보고 응답오는 사이트를 저장한다.

MFC 흉내내면서 배움

[명령어]
GET
POST
DELETE
PUT

헤드에는 프로토콜이 정의한 정보가 들어있다.

IP-TCP-DATA 순으로 네트워크 진행
헤드에 PORT번호도 같이 들어있다.
PORT는 프로세스를 구분한다. (포트를 열고있는 프로세스에 연결)

TCP -> HTTP 응용프로토콜이 올라가 있다.

[주요프로토콜]
HTTP	인터넷
FTP	파일
SMTP	메일

웹에서 응답하는것은 JSON만 있는것은 아니다.

페이스북에서 JSON(JavaScript Object Notation)으로 데이터를 전달한다.

안드로이드에서는 JSON을 GSON으로 바꾼다
자바에서는 JSON을 ArrayList로 바꾼다

http://kickscar.cafe24.com:8080/myapp-api/api/user/list

[동기통신]
응답이 올때까지 기다리다가 응답이 오면 반응하는 통신 (응답을 주고 받는 통신)

[비동기통신]
응답이 없어도 데이터를 보낸다.

- 응답을 기다리는 프로세스가 많으면 어떤 응답이 먼저 올지 모르기 때문에 [[콜백]] 을 달아놓는다.

- 람다는 익명함수(어노니머스 클래스), 한번만 사용할때 주로 사용

(as 아리아스)



========================================================================================================================

1. analysis_fb -> 수집 -> 적재(파일) -> 분석 -> 시각화
2. analysis_pd -> 수집 -> 적재(파일) -> 분석 -> 시각화
3. analysis_chiken -> 수집 -> 적재(파일) -> 분석 -> 시각화
- 시각화 방법은 다름

파이썬 설치 경로(원본인터프리터):
-원본: 		C:\Users\BIT-USER\AppData\Local\Programs\Python\Python36
-바로가기:	 C:\Users\BIT-USER\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Python 3.6
파이참 설치 경로: C:\Program Files\JetBrains
파이참 프로젝트 경로: D:\PycharmProjects
가상환경 경로: D:\PycharmProjects\venv

for in 뒤에는 리스트,튜플, 레인지 같은 값들이 있어야 한다.

yield 리턴대신 끝까지 함수값 전달할때 사용



http://openapi.tour.go.kr/openapi/service/TourismResourceStatsService/getPchrgTrrsrtVisitorList?YM=201701&SIDO=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C&GUNGU=&RES_NM=&numOfRows=10&_type=json&pageNo=1
- (%EC%84%9C) 3개가 글자 한개
http://openapi.tour.go.kr/openapi/service/TourismResourceStatsService/getPchrgTrrsrtVisitorList?YM=201701&SIDO=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C&GUNGU=&RES_NM=&numOfRows=10&_type=json&pageNo=1&serviceKey=6m9Oq%2F9j8cIEp6w%2F3PmNrbAS1P17y24uk3Q2xloOH0WyDrSXbGHGpnF3Pf%2Bob8J6AW2k2HO%2BygzGcjrnyKNgog%3D%3D
- (서비스키 포함)

tdd (테스트 드라이브 디벨로퍼) : 테스트 하면서 개발하는 방식

튜플: 하나의 특성을 집합으로 모음
리스트: 같은 종류의 자료들의 모음

http://openapi.tour.go.kr/openapi/service/TourismResourceStatsService/getPchrgTrrsrtVisitorList?YM=201703&SIDO=%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C&GUNGU=&RES_NM=&numOfRows=10&_type=json&pageNo=1&serviceKey=6m9Oq%2F9j8cIEp6w%2F3PmNrbAS1P17y24uk3Q2xloOH0WyDrSXbGHGpnF3Pf%2Bob8J6AW2k2HO%2BygzGcjrnyKNgog%3D%3D

========================

6월 15일

C:\Windows\Fonts 에서 해당 ttl 파일 복사 ->
2. pytagcloud 한글처리
    1) python 설치 디렉토리/venv/Lib/site-packages/pytagcloud/fonts
        에 한글 폰트 복사.(malgun.ttf)
    2) python 설치 디렉토리/venv/Lib/site-packages/pytagcloud/fonts/font.json 수정
        (ttf 부분은 정확히 입력)
	{
		"name": "Malgun",
		"ttf": "malgun.ttf",
		"web": "http://fonts.googleapis.com/css?family=Malgun"
	},

3. venv/Lib/site-packages/matplotlib/mpl-data/matplotlibrc 파일에서
#font.family         : sans-serif <- 이부분을 찾아서
font.family         : Malgun Gothic <- 이렇게 변경

========================================================================================================================

6월 18일

inner join 양 테이블에서 일치되는 항목만 나오게 하는거
outer join 한 쪽 테이블이 다 나오게 join 하여 나오게 하는거 (left, right)
full join 양쪽다 나오게 하는거 (outer)

========================================================================================================================

6월 19일

오전 10:28	Packages installed successfully: Installed packages: 'scipy' 설치

tourspot r_중국 r_일본 r_미국
경복궁	0.2	0.4	0.5
경복궁	0.2	0.4	0.5

========================================================================================================================

6월 22일

- 김동규
- 광운대학교 교수
- 010-3433-0266
- kdg1703@naver.com
- 3일동안 가이드 (24시간)

NCS(국가직무능력표준)은 무엇인가요?
국가직무능력표준(NCS, National Competency Standards)은 산업현장에서 직무를 수행하기 위해 요구되는
지식·기술·태도 등의 내용을 국가가 체계화한 것입니다.

- 제가 비트에서 6개월동안 창문없는 강의장에서 무엇했는지?
어떤 어떠한 목표하에 어떠어떠한 과정을 거쳐 어떤 프로젝트를 진행하였습니다.



인생목표설정 ->
    내 목표설정을 명확하게 하세요
직종선택 ->
업종선택 ->
회사선택 ->
    희망기업리스트 작성, 기업분석, (희망기업 10개)
기업정보수집 ->
    회사에 대한 정보를 수집, 회사에 적합한 자기소개서를 작성 (기업정보 수집1개)
    자소서는 프로젝트 중심, 기업분석 잘됐고 프로젝트 완성이후 프로젝트를 잘 설명할수 있으면 취업 잘될것이다.
    팀프로젝트를 할때 퍼포먼스를 실전과 같이 만들수 있게끔 하라
서류 및 면접준비 ->
리허설 ->
취업 ->


정량적 개념의 '기업이 바라는 인재'
1. 채용허들 : (기본은 되어야 한다.)
2. 조직적응 :


입사서류의 이해
1. 서류전형 이력서 / 자기소개서 => 자기소개서는 이거 물어보세요 라는 키워드라고 할수 있다.

이력서
프로젝트 수행사항을 잘 표현하는것이 중요하다.
 프로젝트 기술서 -1
 개발 기간은 년과 월까지만 기입
 프로젝트는 최근 개발한 순으로 기입

 프로젝트의 끝판왕은 창업이다.

사실위주

마인드맵
기업양식
기업분석
입사서류

다음시간:포트폴리오 사례
다다음시간: 면접, 1분스피치, 이미지 메이킹

과정 끝나기 전까지 이력서와 자기소개서 기반이된 포트폴리오를 만들수 있도록 한다.

========================================================================================================================
6월 25일

기존에 C위에서 돌아가던게 현재는 C위에 자바가 돌아간다.
그래서 소프트웨어도 아니고 하드웨어도 아닌 미들웨어 라고 불린다.

IMF 이후 PC 가 인터넷으로 붙었다
2008년 금융위기이후 폰이 인터넷으로 붙었다
최근 사물을 인터넷으로 붙이려는 시도가 일어나고 있다.

프로토콜
ip 인터넷 프로토콜
tcp 트랜스퍼
http 하이퍼 텍스트 트랜스퍼 프로토콜
ftp 파일 트랜스퍼 프로토콜

네트워크는 반드시 요청과 응답이 있어야 되어야 한다.

데이터 -> 패킷 <- (주소(IP), (데이터 순서, 데이터 개요, ack)(TCP))

프로세스를 구분하는것이 포트(Port) 이다
Internet Address = (IP Address + Port)

인터넷 흐름
url 입력
1. 소켓 생성후 connect (ip 주소 입력), 포트 입력)
2. 연결
3. 스레드 생성 (여러놈이 찌르기 때문에 스레드 생성한다) 왜냐하면 나하고만 통신할수는 없기때문이다.
4. 스레드가 임의의 통신포트를 준다. (우리는 알수 없다).
5. 이후에는 통신포트를 통해 통신한다.
6. 추가연결은 3. 이후 반복.



알고리즘

http://192.168.56.1:8088/index.html

========================================================================================================================
6월 26일

daemon = 영혼만 있고 실체가 없는 존재

리퀘스트 = GET /index.jsp HTTP/1.1

서버와 연결이 되면 바로 끊긴다. (서버 자원 때문)
그래서 인증정보는 클라이언트 쿠키에 저장 (인증쿠키는 메모리에)
같은 도메인에 접속 시도할때마다 인증정보를 계속 같이 보낸다.

/ 로 시작하면 절대경로 아니면 상대경로

DNS 서버가 항상 떠있다

.naver.com
도메인 이름은 한서버에 여러개가 달릴수 있다.

웹서버는
web server -> httpd conf 에 설정해놓으면 실행된다.

CGI = 코몬 게이트웨이 인터페이스

WAS = 웹 어플리케이션 서버
어플리케이션을 만들어놓고 등록해놓으면 실행해준다.

WAS와 웹서버가 통신한다.

반복작업이 많을 경우에 framework 를 사용한다.
framework 가 없는 언어는 없다.

GET : id를 넘겨서 게시판의 리스트를 가져올때는 주로 GET을 사용한다. (양이 적을때)
POST : 글을 작성한다고 할때는 주로 POST를 사용한다. (양이 많을때)
[[GET은 가져오는 것이고 POST는 수행하는 것]]
GET은 서버에서 어떤 데이터를 가져와서 보여준다거나 하는 용도이지 서버의 값이나 상태등을 바꾸지 않습니다.
예) 게시판의 리스트라던지 글보기 기능 같은 것이 이에 해당
POST는 서버의 값이나 상태를 바꾸기 위해서 사용합니다.
예) 글쓰기를 하면 글의 내용이 디비에 저장이 되고 수정을 하면 디비값이 수정이 되죠. 이럴 경우에 POST를 사용합니다.

클라이언트가 서버로 요청을 했을때, 보내는 데이터를 HTTP 패킷이라 표현한다.
HTTP 프로토콜을 쓰므로, 앞에 HTTP가 붙고 인터넷을 통해 보내는 데이터를 패킷이라 표현하므로,
HTTP패킷 이라 부른다. HTTP패킷의 구조는 크게 헤더 와 바디로 나뉘어진다.
GET방식 vs POST방식
 두 방식 모두, 서버에 요청을 하는 메서드이다.




========================================================================================================================
6월 27일

MVC 구조
MVC FW(Model View Controller frame work) = MVC frame work (python, java ee, php)
1. URL Mapping
2. Parameter Value
3. Database
4. View (template, script)

MVC는 패턴 (설계 패턴, 어플리케이션의 구조패턴)

jango는 MVC로 되어있다
jango를 안쓰는 데이터베이스는 한개도 없다.

한가지 역할만 잘하는것이 객체 지향.

Controller = request 에 대한 처리 -> 처리할 모델을 선택.

MVC 구조는 유지보수가 쉽다.
jango는 MVC와 약간 다르다.


MySql 설치
1. mysql-essential-5.1.44-winx64
2. mysql-workbench-community-6.2.5-winx64   # 아래 workbench 설치에서 설치

ID: manager

DBMS (데이터 베이스 매니지먼트 시스템)
외부에서 데이터에 접속할때 항상 DBMS를 통해서 작업한다.

mysql 이 오라클에 인수된후 mysql에 있던 사람들이 나와서 MariaDB를 만들었다.
처음에는 mysql -MariaDB가 호환되었다가 최근버전부터 호환되지 않는다.

mysql 포트 : 3306

1. DB생성
2. 계정생성
3. 권한부여


DCL 데이타 C~ 랭귀지
DDL 데이타 D~ 랭귀지
DML 데이타 M~ 랭귀지

jango는 사용자가 직접 쿼리를 날리지 않는다.
최근 추세는 DB쿼리를 코드에 넣지 않는다.
ORM(Object-Relation-Mapping) = 외국과 한국 대기업에서 사용
Object = 객체지향
Relation = RDB
Object <-> Relation 상호간 부조화가 일어난다

DA = 데이터 아키텍쳐 (설계)
DBA = 데이터 관리
DB App Dev = DA가 만들어준 쿼리를 가지고 화면을 만들어 준다.
DA로 가던지 SWA로 가야된다.
데이터가 좋아서 가는 사람들 DA
소프트웨어가 좋아서 가는 사람들 SWA

객체지향이 필요없다.
Dao class 만들어서 CRUD 메소드로 데이터를 받아온다.

ERD

자바에서는 ORM이 잘 발달되어 있다.

데이터베이스 이름:
djdb - DB
djdb - id
djdb - password


# DB 접속
CMD> mysql -u root -p
password: (manager)

show databases;
use mysql;
show tables;
desc user;
create database djdb;
create user 'djdb'@'localhost' identified by 'djdb';  # 로컬호스트에서만 돌게(윈도우에서만 돌게)
--grant all privileges on *   # 모든 권한을 주겠다.
grant all privileges on djdb.* to 'djdb'@'localhost'; # djdb에 있는 데이터베이스에있는 테이블에 있는 모든 권한을 주겠다.
flush privileges;   # 반영시켜주라는 명령어(몇번)
exit    # DB 나오기

=========================================================

CMD> mysql -u djdb -D djdb -p    # 대화식으로 하겠다.
pass: djdb

workbench 설치
+ 버튼 클릭
이름, 유저네임, 패스워드, 스키마 전체 djdb 로 입력

리다이렉트는 주소를 갈아끼워주는 기능을 한다.

view 가 가장 중요하다.

url 따는게 중요하다.

글로벌에 장고 설치하고 파이참 프로젝트에 옮긴후에 OPEN 하면 된다. (한단계씩 위로)

파이참 터미널에서
> python
>>> import django
>>> print(django.get_version())
>>> Ctrl + Z (Enter) # 파이썬 나가기

> django-admin startproject python_ch3      # python_ch3은 프로젝트 이름!!!!!!!!
하면 프로젝트에 파일이 생성된다.
디렉토리 한단계씩 위로 올리고 기존 디렉토리는 삭제


> python manage.py startapp emaillist
하면 프로젝트에 emaillist 파일 생성되고 하위 디렉토리에 migrations 디렉토리가 생성된다.
emaillist 디렉토리 하위 디렉토리에 templates 디렉토리 생성하고 form.html 과 index.html 파일을 복사해서 넣어준다.


python manage.py makemigrations # migrations 디렉토리 있으면 pass

python manage.py migrate

python manage.py runserver 0.0.0.0:8000 # 서버실행
[웹페이지에서]
http://localhost:8000
http://localhost:8000/admin/

파이참에서 Ctrl + c 하면 어플리케이션(서버) 종료

python manage.py createsuperuser    # admin에 접속하기 위해 유저를 만든다.

ppt 39p. 참조하여 settings.py 에 설정 변경

mysqlclient 설치
pip 설치 에러는 구글에서 검색하여 해결

ppt 40p. 참조하여 python_ch2/settings.py 에 DB설정 변경

-------------------


[form.html]

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>메일 리스트 가입</h1>
	<p>
		메일 리스트에 가입하려면,<br>
		아래 항목을 기입하고 submit 버튼을 클릭하세요.
	</p>
	<form action="/emaillist/add" method="post">{% csrf_token %}
	    First name: <input type="text" name="fn" value="" ><br>
	    Last name: <input type="text" name="ln" value=""><br>
	    Email address: <input type="text" name="email" value=""><br>
	    <input type="submit" value="submit">
	</form>
	<br>
	<p>
	<a href="/emaillist">리스트 바로가기</a>
	</p>
</body>
</html>
-----------

[index.html]

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>메일 리스트에 가입되었습니다.</h1>
	<p>입력한 정보 내역입니다.</p>
	<!-- 메일정보 리스트 -->
	{% for emaillist in emaillist_list %}
	<table border="1" cellpadding="5" cellspacing="2">
		<tr>
			<td align=right>First name: </td>
			<td>{{ emaillist.first_name }}</td>
		</tr>
		<tr>
			<td align=right width="110">Last name: </td>
			<td width="110">{{ emaillist.last_name }}</td>
		</tr>
		<tr>
			<td align=right>Email address: </td>
			<td>{{ emaillist.email }}</td>
		</tr>
	</table>
	<br>
	{% endfor %}
	<p>
		<a href="/emaillist/form">추가메일 등록</a>
	</p>
	<br>
</body>
</html>
-------------------
form.html 과 index.html 파일을 위와같이 수정한다.


views.py 에 코드 작성

---------------------
[emaillist/views.py]

from django.shortcuts import render
from emaillist.models import Emaillist
from django.http import HttpResponseRedirect

# Create your views here.

def index(request):
    emaillist_list = Emaillist.objects.all().order_by('-id')
    data = {'emaillist_list':emaillist_list}
    return render(request, 'index.html', data)

def form(request):
    return render(request, 'form.html')

def add(request):
    emaillist = Emaillist()
    emaillist.first_name = request.POST['fn']
    emaillist.last_name = request.POST['ln']
    emaillist.email = request.POST['email']

    emaillist.save()

    return HttpResponseRedirect('/emaillist')

-------------------------

urls.py 에 코드 추가

------------------

[python_ch3/urls.py]

from django.contrib import admin
from django.urls import path

from emaillist import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('emaillist/', views.index),
    path('emaillist/form', views.form),
    path('emaillist/add', views.add)
]

---------------------

models.py 에 코드 작성

--------------------

[emaillist/models.py]

class Emaillist(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=50)
    email = models.CharField(max_length=200)

    def __str__(self):
        return "Emaillist(%s, %s, %s)" % (self.first_name, self.last_name, self.email)

-----------------------

> python manage.py migrate

> python manage.py runserver 0.0.0.0:8000
웹페이지에서 접속 테스트
http://localhost:8000

ppt 42p. 참조하여 emaillist/models.py 에 코드 입력    # 위에서 작성
ppt 43p. 참조하여 emaillist/admin.py 에 코드 입력

> python manage.py makemigrations
> python manage.py migrate
하면 DB에 emaillist_emaillist 테이블이 생성된다.

> python manage.py runserver 0.0.0.0:8000
웹페이지에서 접속 테스트
http://localhost:8000/emaillist

웹페이지에서 이메일 정보 등록후 workbench(DB) 에서
select * from emaillist_emaillist order by id desc;
명령어로 DB 등록 확인

view 제작
1. /emaillist   # url 기억
2. /emaillist/form  # 폼을 출력
3. /emaillist/add   # 등록버튼 클릭



========================================================================================================================
6월 28일

> python manage.py startapp guestbook
하면 guestbook 디렉토리가 생성된다.

urls.py 에서 guestbook 추가
~ path('guestbook/', guestbook_views.index)
이메일리스트와 게스트북 양쪽에 views가 중복되기 때문에
from emaillist import views ->
import emaillist.views as emaillist_views
import guestbook.views as guestbook_views   # 이렇게 수정

각각의 views.py 코드 작성
return render(request, 'emaillist/index.html', data)
return render(request, 'emaillist/form.html')
[guestbook/views.py]
def index(request):
    return render(request, 'guestbook/index.html')

templates 디렉토리 생성후 파일 복사.

최상단에 templates 생성후 emaillist, guestbook 디렉토리 생성-> 기존 자료 복사

각각의 views.py 에 리턴 경로 코드 수정
return render(request, 'emaillist/index.html', data)
return render(request, 'guestbook/index.html')

settings.py 에 'DIRS': [os.path.join(BASE_DIR,'templates')], 코드 추가.

삭제버튼을 누르면 deleteform으로 가야된다.
/guestbook/delete

------------------------

[guestbook/models.py 코드 작성]

class Guestbook(models.Model):
    name = models.CharField(max_length=20)
    password = models.CharField(max_length=20)
    message = models.CharField(max_length=2000)
    regdate = models.DateTimeField(auto_now=True)  #시간까지, 인서트 될때 지금시간을 넣는다.

    def __str__(self):
        return 'Guestbook(%s, %s, %s, %s) % (self.name, self.password, self.message, str(self.regdate))'

----------------------------

 [guestbook/admin.py 에서 코드 작성]


from django.contrib import admin
from guestbook.models import Guestbook

# Register your models here.
admin.site.register(Guestbook)

 --------------------------

python manage.py makemigrations
하면 0001_initial.py 파일이 생성된다.
python manage.py migrate
하면 initial.py 파일이 실행된다.

모델이 변경되면 위 2작업을 꼭 해준다.

[guestbook/index.html 파일 변경]
table 안쪽으로 한번 탭
<form action="/guestbook/add" method="post">

urls.py 수정
path('guestbook/add', guestbook_views.add)


----------------------
guestbook/views.py 수정
from django.shortcuts import render
from django.http import HttpResponseRedirect
from guestbook.models import Guestbook

# Create your views here.

def index(request):
    return render(request, 'guestbook/index.html')

def add(request):
    guestbook = Guestbook()
    guestbook.name = request.POST['name']   # index.html 에 저장된 이름 사용
    guestbook.password = request.POST['password']
    guestbook.message = request.POST['message']

    guestbook.save()

    return HttpResponseRedirect('/guestbook')

========================
guestbook/index.html 수정
	<form method="post" action="">{% csrf_token %}

-----------------
guestbook/views.py 수정
def index(request):
    guestbook_list = Guestbook.objects.all().order_by('-regdate')

    context = {'guestbook_list': guestbook_list}
    return render(request, 'guestbook/index.html', context)

-----------------
Packages installed successfully: Installed packages: 'django-mathfilters' 설치
settings INSTALLED_APPS 에 등록
'mathfilters',


---------------------------
[guestbook/index.html 수정]

{% load mathfilters %}
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>방명록</title>
</head>
<body>
	<form action="/guestbook/add" method="post">{% csrf_token %}
		<table border=1 width=500>
			<tr>
				<td>이름</td><td><input type="text" name="name"></td>
				<td>비밀번호</td><td><input type="password" name="password"></td>
			</tr>
			<tr>
				<td colspan=4><textarea name="message" cols=60 rows=5></textarea></td>
			</tr>
			<tr>
				<td colspan=4 align=right><input type="submit" VALUE=" 확인 "></td>
			</tr>
		</table>
	</form>
	{% for guestbook in guestbook_list %}
	<br>
	<table width=510 border=1>
		<tr>
			<!--<td>[{{ guestbook.id}}]</td>-->
			<td>{{ guestbook_list.count | add:1 | sub:forloop.counter }}</td> <!-- 전체 게시판 갯수 | +1 | 카운트-->
			<td>{{ guestbook.name }}</td>
			<td>{{ guestbook.regdate|date:'Y-m-d H:i:s' }}</td>
			<td><a href="/guestbook/deleteform?id={{ guestbook.id}}">삭제</a></td>
		</tr>
		<tr>
			<td colspan=4>
				{{ guestbook.message|linebreaksbr }}
			</td>
		</tr>
	</table>
	{% endfor  %}
</body>
</html>

----------------------


[guestbook/views.py 추가]

from django.shortcuts import render
from django.http import HttpResponseRedirect
from guestbook.models import Guestbook

# Create your views here.

# def delete(request):
#     Guestbook.objects.filter(id=10).filter(password=).delete()

def index(request):
    guestbook_list = Guestbook.objects.all().order_by('-regdate')

    context = {'guestbook_list': guestbook_list}
    return render(request, 'guestbook/index.html', context)

def add(request):
    guestbook = Guestbook()
    guestbook.name = request.POST['name']   # index.html 에 저장된 이름 사용
    guestbook.password = request.POST['password']
    guestbook.message = request.POST['message']

    guestbook.save()

    return HttpResponseRedirect('/guestbook')


---------------------------------------------------

setting.py INSTALLED_APPS 에 'guestbook' 추가

=========================================================

1. pycharm 에서 mysite 프로젝트 생성
2. Django 설치
3. mysqlclient 설치

[파이참 터미널]
> pip --version
(mysqlclient 설치)
> pip install mysqlclient==1.3.12

4. 장고 프로젝트 생성
> django-admin startproject mysite  # 프로젝트 생성

5. 디렉토리 정리
전체 파일을 한단계 위로 이동.

6. settings.py 설정
    1) TIME_ZONE = 'Asia/Seoul'
    2) DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'djdb',
        'USER': 'djdb',
        'PASSWORD': 'djdb',
        'HOST': '127.0.0.1',
        'PORT': '3306'
       }
    }

7. 기본적으로 장고 프로젝트가 관리하는 테이블 생성하기
    터미널에서
    DB 스키마가 변경되면 -> 스키마는 관계, 테이블이 더 생긴다 등등.
    > python manage.py migrate

에러이유) 기존에 만들어져 있던 스키마가 이미 있기때문에 이런 메세지가 나온다.
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions
Running migrations:
  No migrations to apply.

8. 장고 프로젝트의 관리자 계정 생성
    > python manage.py createsuperuser

9. 지금까지 작업 확인하기
    1) 서버 시작하기
    터미널에서
    > python manage.py runserver 0.0.0.0:8888
    2) 브라우저로 접근
    http://localhost:8888


최상위에서 templates 디렉토리 생성후 파일복사
settings.py 에서 코드 추가
> 'DIRS': [os.path.join(BASE_DIR,'templates')],

어플리케이션 만들기
> python manage.py startapp main
메인 디렉토리 생성됨

장고에 사용해야 한다고 알려줘야 한다.
settings.py 에서 코드 추가
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]

urls.py 추가
import main.views as main_views

urlpatterns = [
    path('', main_views.index),
    path('admin/', admin.site.urls),
]

views.py 함수 작성
from django.shortcuts import render

# Create your views here.

def index(request):
    return render(request, 'main/index.html')

서버 테스트

settings.py 하단
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'statics'),
)
STATIC_URL = '/assets/'

======================================
main/index.html 수정
<!DOCTYPE html>
<html>
<head>
<title>mysite</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link href="/assets/css/main.css" rel="stylesheet" type="text/css">
</head>
<body>
	<div id="container">
		<div id="header">
			<h1>MySite</h1>
			<ul>
				<li><a href="/user/login">로그인</a><li>
				<li><a href="/user/join">회원가입</a><li>
				<li><a href="/user/modify">회원정보수정</a><li>
				<li><a href="/user/logout">로그아웃</a><li>
				<li>님 안녕하세요 ^^;</li>
			</ul>
		</div>
		<div id="wrapper">
			<div id="content">
				<div id="site-introduction">
					<img id="profile" src="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-1/p240x240/30705531_2083087868372808_5261052926483232647_n.jpg?_nc_cat=0&oh=db97a9950eade94d765d2b566ff92fbc&oe=5BE17354">
					<h2>안녕하세요. 안대혁의  mysite에 오신 것을 환영합니다.</h2>
					<p>
						이 사이트는  웹 프로그램밍 실습과제 예제 사이트입니다.<br>
						메뉴는  사이트 소개, 방명록, 게시판이 있구요. Python 수업 + 데이터베이스 수업 + 웹프로그래밍 수업 배운 거 있는거 없는 거 다 합쳐서
						만들어 놓은 사이트 입니다.<br><br>
						<a href="/guestbook">방명록</a>에 글 남기기<br>
					</p>
				</div>
			</div>
		</div>
		<div id="navigation">
			<ul>
				<li><a href="/">안대혁</a></li>
				<li><a href="/guestbook">방명록</a></li>
				<li><a href="/board">게시판</a></li>
			</ul>
		</div>
		<div id="footer">
			<p>(c)opyright 2015, 2016, 2017, 2018</p>
		</div>
	</div>
</body>
</html>

-------------------------------------

settings.py -> urls.py -> views.py ->


========================================================================================================================
6월 29일

템플릿 상송

templates 에 base.html 파일 만듬
main/ index.html 복사해서 붙여넣기
========================================
[main/ base.html 코드 작성]
<!DOCTYPE html>
<html>
<head>
<title>mysite</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link href="/assets/css/main.css" rel="stylesheet" type="text/css">
{% block css_link %}{% endblock %}
</head>
<body>
	<div id="container">
		<div id="header">
			<h1>MySite</h1>
			<ul>
				<li><a href="/user/login">로그인</a><li>
				<li><a href="/user/join">회원가입</a><li>
				<li><a href="/user/modify">회원정보수정</a><li>
				<li><a href="/user/logout">로그아웃</a><li>
				<li>님 안녕하세요 ^^;</li>
			</ul>
		</div>
		<div id="wrapper">
			<div id="content">
                {% block content %}
                {% endblock %}
			</div>
		</div>
		<div id="navigation">
			<ul>
				<li><a href="/">안대혁</a></li>
				<li><a href="/guestbook">방명록</a></li>
				<li><a href="/board">게시판</a></li>
			</ul>
		</div>
		<div id="footer">
			<p>(c)opyright 2015, 2016, 2017, 2018</p>
		</div>
	</div>
</body>
</html>
==================================

[main/ index.html 수정]

{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/main.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
<div id="site-introduction">
	<img id="profile" src="https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-1/p240x240/30705531_2083087868372808_5261052926483232647_n.jpg?_nc_cat=0&oh=db97a9950eade94d765d2b566ff92fbc&oe=5BE17354">
	<h2>안녕하세요. 안대혁의  mysite에 오신 것을 환영합니다.</h2>
	<p>
		이 사이트는  웹 프로그램밍 실습과제 예제 사이트입니다.<br>
		메뉴는  사이트 소개, 방명록, 게시판이 있구요. Python 수업 + 데이터베이스 수업 + 웹프로그래밍 수업 배운 거 있는거 없는 거 다 합쳐서
		만들어 놓은 사이트 입니다.<br><br>
		<a href="/guestbook">방명록</a>에 글 남기기<br>
	</p>
</div>
{% endblock %}

==========================================

[templates/user/joinform.html, joinsuccess.html, loginform.html] 수정

[joinform.html]
{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/user.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
			<div id="user">

				<form id="join-form" name="joinForm" method="" action="">
					<label class="block-label" for="name">이름</label>
					<input id="name" name="name" type="text" value="">

					<label class="block-label" for="email">이메일</label>
					<input id="email" name="email" type="text" value="">
					<input type="button" value="id 중복체크">

					<label class="block-label">패스워드</label>
					<input name="password" type="password" value="">

					<fieldset>
						<legend>성별</legend>
						<label>여</label> <input type="radio" name="gender" value="female" checked="checked">
						<label>남</label> <input type="radio" name="gender" value="male">
					</fieldset>

					<fieldset>
						<legend>약관동의</legend>
						<input id="agree-prov" type="checkbox" name="agreeProv" value="y">
						<label>서비스 약관에 동의합니다.</label>
					</fieldset>

					<input type="submit" value="가입하기">

				</form>
			</div>
{% endblock %}
====================
[joinsuccess.html
{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/user.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
			<div id="user">
				<p class="jr-success">
					회원가입을 축하합니다.
					<br><br>
					<a href="/user?a=loginform">로그인하기</a>
				</p>
			</div>
{% endblock %}


===============================
[loginform.html]

{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/user.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
			<div id="user">
				<form id="login-form" name="loginform" method="post" action="/user?a=login">
					<label class="block-label" for="email">이메일</label>
					<input id="email" name="email" type="text" value="">
					<label class="block-label" >패스워드</label>
					<input name="password" type="password" value="">
					<p>
						로그인이 실패 했습니다.
					</p>
					<input type="submit" value="로그인">
				</form>
			</div>
{% endblock %}

=================================

[mysite/settings.py 수정]
...
		<div id="header">
			<h1>MySite</h1>
			<ul>
				<li><a href="/user/loginform">로그인</a><li>
				<li><a href="/user/joinform">회원가입</a><li>
				<li><a href="/user/modifyform">회원정보수정</a><li>
				<li><a href="/user/logout">로그아웃</a><li>
				<li>님 안녕하세요 ^^;</li>
			</ul>
		</div>
...
=================================

URL부터 따야 된다.
1. /user/joinform

====================================

유저 어플리케이션 만들기
python manage.py startapp user

mysite/setting.py 수정
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
    'guestbook',
    'user',
]

python manage.py makemigrations
python manage.py migrate
=========================


[mysite/urls.py 추가]

import user.views as user_views

urlpatterns = [
    path('', main_views.index),
    path('user/joinform/', user_views.joinform),
    path('admin/', admin.site.urls),
]
========================

'DIRS': [os.path.join(BASE_DIR,'templates')],   # 템플릿은 여기를 기준으로 해라

[user/views.py 코드 작성]

from django.shortcuts import render

# Create your views here.

def joinform(request):
    return render(request, 'user/joinform.html')

=================================

서버 테스트

[urls.py 수정]

from django.contrib import admin
from django.urls import path

import main.views as main_views
import user.views as user_views

urlpatterns = [
    path('', main_views.index),
    path('user/joinform/', user_views.joinform),
    path('user/joinsuccess/', user_views.joinsuccess),
    path('admin/', admin.site.urls),
]


==================

[user/views.py 수정]

from django.shortcuts import render

# Create your views here.

def joinform(request):
    return render(request, 'user/joinform.html')

def joinsuccess(request):
    return render(request, 'user/joinsuccess.html')

    ===================

[joinsuccess.html 수정]
{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/user.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
			<div id="user">
				<p class="jr-success">
					회원가입을 축하합니다.
					<br><br>
					<a href="/user/loginform">로그인하기</a>
				</p>
			</div>
{% endblock %}


======================================

[joinform.html 수정]


			<div id="user">

				<form id="join-form" name="joinForm" method="post" action="/user/join"> <==
					<label class="block-label" for="name">이름</label>


============================

Alt + Enter = 임포트

===========================

[urls.py 수정]

from django.contrib import admin
from django.urls import path

import main.views as main_views
import user.views as user_views

urlpatterns = [
    path('', main_views.index),
    path('user/joinform/', user_views.joinform),
    path('user/join//', user_views.join),
    path('user/joinsuccess/', user_views.joinsuccess),
    path('admin/', admin.site.urls),
]

========================

[user/views.py 수정]

from django.http import HttpResponseRedirect
from django.shortcuts import render

# Create your views here.
from user.models import User


def joinform(request):
    return render(request, 'user/joinform.html')

def joinsuccess(request):
    return render(request, 'user/joinsuccess.html')

def join(request):
    user = User()
    user.name = request.POST['name']
    user.email = request.POST['email']
    user.password = request.POST['password']
    user.gender = request.POST['gender']

    user.save()

    return HttpResponseRedirect('user/joinsuccess')

==========================

서버 테스트
-> 런타임 오류

=======================

html 에 {% csrf_token %} 추가

==================

[urls.py 수정]
from django.contrib import admin
from django.urls import path

import main.views as main_views
import user.views as user_views

urlpatterns = [
    path('', main_views.index),
    path('user/joinform/', user_views.joinform),
    path('user/join', user_views.join),     <-
    path('user/joinsuccess/', user_views.joinsuccess),
    path('admin/', admin.site.urls),
]

===================
urls.py
path('user/loginform/', user_views.loginform),

user/views.py
def loginform(request):
    return render(request, 'user/loginform.html')

urls.py
path('user/login', user_views.login),

user/views.py
=======================================

def login(request):
    result = User.objects.filter(email=request.POST['email']).filter(password=request.POST['password']) # 한개가 아니라 리스트 비슷하게 들어온다. 리스트가 비어있으면 에러가 난다.

    # 로그인 실패
    if len(result) == 0:
        return HttpResponseRedirect('/user/loginform?result=false')

    # 로그인 처리
    authuser = result[0]
    request.session['authuser'] = model_to_dict(authuser)  # 인증처리
    # return HttpResponse('hello world')  # 텍스트를 출력하고 싶을때 /hello world 출력됨
    return HttpResponseRedirect('/')

======================================
[loginform.html]
{% extends "../base.html" %} <!--상속받는다는 표시-->

{% block css_link %}
<link href="/assets/css/user.css" rel="stylesheet" type="text/css">
{% endblock %}

{% block content %}
			<div id="user">
				<form id="login-form" name="loginform" method="post" action="/user?a=login">{% csrf_token %}
					<label class="block-label" for="email">이메일</label>
					<input id="email" name="email" type="text" value="">
					<label class="block-label" >패스워드</label>
					<input name="password" type="password" value="">
					<!--if-->
					{% if request.GET.result == 'false' %}
					<p>
						로그인이 실패 했습니다.
					</p>
					{% endif %}
					<input type="submit" value="로그인">
				</form>
			</div>
{% endblock %}


=================

[base.html]

<!DOCTYPE html>
<html>
<head>
<title>mysite</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<link href="/assets/css/main.css" rel="stylesheet" type="text/css">
{% block css_link %}{% endblock %}
</head>
<body>
	<div id="container">
		<div id="header">
			<h1>MySite</h1>
			<ul>
				{% if request.session.authuser is None %}
					<li><a href="/user/loginform">로그인</a><li>
					<li><a href="/user/joinform">회원가입</a><li>
				{% else %}
					<li><a href="/user/modifyform">회원정보수정</a><li>
					<li><a href="/user/logout">로그아웃</a><li>
					<li>{{ request.session.authuser.name }}님 안녕하세요 ^^;</li>
				{% endif %}
			</ul>
		</div>
		<div id="wrapper">
			<div id="content">
                {% block content %}
                {% endblock %}
			</div>
		</div>
		<div id="navigation">
			<ul>
				<li><a href="/">안대혁</a></li>
				<li><a href="/guestbook">방명록</a></li>
				<li><a href="/board">게시판</a></li>
			</ul>
		</div>
		<div id="footer">
			<p>(c)opyright 2015, 2016, 2017, 2018</p>
		</div>
	</div>
</body>
</html>

=================================

[settings.py] 하단 추가

# session
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

================================

[로그아웃 처리]

urls.py 추가

path('user/logout', user_views.logout),

================
user/views.py 추가

def logout(request):
    del request.session['authuser']
    return HttpResponseRedirect('/')

===============================
html if else 문법
				{% if request.session.authuser is None %}
					<li><a href="/user/loginform">로그인</a><li>
					<li><a href="/user/joinform">회원가입</a><li>
				{% else %}
					<li><a href="/user/modifyform">회원정보수정</a><li>
					<li><a href="/user/logout">로그아웃</a><li>
					<li>{{ request.session.authuser.name }}님 안녕하세요 ^^;</li>
				{% endif %}

=======================

python manage.py startapp board

setting.py 추가

board/views.py 코드 작성

def writeform(request):
    # 인증 체크
    if request.session['authuser'] is None:
        return HttpResponseRedirect('/user/loginform')


==================================

[board/models.py]

from django.db import models

# Create your models here.
from user.models import User


class Board(models.Model):
    title = models.CharField(max_length=200)
    content = models.CharField(max_length=2000)
    hit = models.IntegerField(default=0)
    regdate = models.DateTimeField
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # 보드에 정보를 가져오면 유저에 세팅된다 / on_deleete= 유저가 삭제되었을때 나는 어떻게 할것인가 / 유저가 삭제되었을때 글도 다 같이 지워준다. RDB


    def __str__(self):
        return "Board(%s, %s, %d, %s, %d)" % (
            self.title,
            self.content,
            self.hit,
            str(self.regdate),
            self.user.id)

    ===================================

[board/admin.py]
모델 등록

from board.models import Board
# Register your models here.
admin.register(Board)

=======================

python manage.py makemigrations
python manage.py migrate

=======================

<h1> 제목
<p> 소제목
<form action="/emaillist/add" method="post">{% csrf_token %}    action = 경로에 있는 함수 실행, post 형식으로.
</form>

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================